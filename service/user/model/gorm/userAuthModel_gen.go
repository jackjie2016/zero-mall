// Code generated by goctl. DO NOT EDIT!

package gorm

import (
	"context"
	"fmt"
	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
	"strings"
)

var (
	userAuthFieldNames          = builder.RawFieldNames(&UserAuth{})
	userAuthRows                = strings.Join(userAuthFieldNames, ",")
	userAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	userAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(userAuthFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheGoZeroMallUserAuthIdPrefix              = "cache:goZeroMall:userAuth:id:"
	cacheGoZeroMallUserAuthAuthTypeAuthKeyPrefix = "cache:goZeroMall:userAuth:authType:authKey:"
	cacheGoZeroMallUserAuthUserIdAuthTypePrefix  = "cache:goZeroMall:userAuth:userId:authType:"
)

type (
	userAuthModel interface {
		Insert(ctx context.Context, data *UserAuth) error
		FindOne(ctx context.Context, id int64) (*UserAuth, error)
		FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UserAuth, error)
		FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UserAuth, error)
		Update(ctx context.Context, data *UserAuth) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAuthModel struct {
		gormc.CachedConn
		table string
	}

	UserAuth struct {
		BaseModel
		DelState int64  `gorm:"column:del_state"`
		Version  int64  `gorm:"column:version"` // 版本号
		UserId   int32  `gorm:"column:user_id"`
		AuthKey  string `gorm:"column:auth_key"`  // 平台唯一id
		AuthType string `gorm:"column:auth_type"` // 平台类型
	}
)

func newUserAuthModel(conn *gorm.DB, c cache.CacheConf) *defaultUserAuthModel {
	return &defaultUserAuthModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user_auth`",
	}
}

func (m *defaultUserAuthModel) Insert(ctx context.Context, data *UserAuth) error {
	goZeroMallUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	goZeroMallUserAuthIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserAuthIdPrefix, data.Id)
	goZeroMallUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthUserIdAuthTypePrefix, data.UserId, data.AuthType)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(&data).Error
	}, goZeroMallUserAuthAuthTypeAuthKeyKey, goZeroMallUserAuthIdKey, goZeroMallUserAuthUserIdAuthTypeKey)
	return err
}

func (m *defaultUserAuthModel) FindOne(ctx context.Context, id int64) (*UserAuth, error) {
	goZeroMallUserAuthIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserAuthIdPrefix, id)
	var resp UserAuth
	err := m.QueryCtx(ctx, &resp, goZeroMallUserAuthIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&UserAuth{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) FindOneByAuthTypeAuthKey(ctx context.Context, authType string, authKey string) (*UserAuth, error) {
	goZeroMallUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthAuthTypeAuthKeyPrefix, authType, authKey)
	var resp UserAuth
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallUserAuthAuthTypeAuthKeyKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserAuth{}).Where("`auth_type` = ? and `auth_key` = ?", authType, authKey).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) FindOneByUserIdAuthType(ctx context.Context, userId int64, authType string) (*UserAuth, error) {
	goZeroMallUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthUserIdAuthTypePrefix, userId, authType)
	var resp UserAuth
	err := m.QueryRowIndexCtx(ctx, &resp, goZeroMallUserAuthUserIdAuthTypeKey, m.formatPrimary, func(conn *gorm.DB, v interface{}) (interface{}, error) {
		if err := conn.Model(&UserAuth{}).Where("`user_id` = ? and `auth_type` = ?", userId, authType).Take(&resp).Error; err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAuthModel) Update(ctx context.Context, data *UserAuth) error {
	goZeroMallUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	goZeroMallUserAuthIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserAuthIdPrefix, data.Id)
	goZeroMallUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthUserIdAuthTypePrefix, data.UserId, data.AuthType)
	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Save(data).Error
	}, goZeroMallUserAuthAuthTypeAuthKeyKey, goZeroMallUserAuthIdKey, goZeroMallUserAuthUserIdAuthTypeKey)
	return err
}

func (m *defaultUserAuthModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	goZeroMallUserAuthAuthTypeAuthKeyKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthAuthTypeAuthKeyPrefix, data.AuthType, data.AuthKey)
	goZeroMallUserAuthIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallUserAuthIdPrefix, id)
	goZeroMallUserAuthUserIdAuthTypeKey := fmt.Sprintf("%s%v:%v", cacheGoZeroMallUserAuthUserIdAuthTypePrefix, data.UserId, data.AuthType)
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		return conn.Delete(&UserAuth{}, id).Error
	}, goZeroMallUserAuthAuthTypeAuthKeyKey, goZeroMallUserAuthIdKey, goZeroMallUserAuthUserIdAuthTypeKey)
	return err
}

func (m *defaultUserAuthModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallUserAuthIdPrefix, primary)
}

func (m *defaultUserAuthModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&UserAuth{}).Where("`id` = ?", primary).Take(v).Error
}

func (m *defaultUserAuthModel) tableName() string {
	return m.table
}
