// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"gorm.io/gorm"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsFieldNames          = builder.RawFieldNames(&Goods{})
	goodsRows                = strings.Join(goodsFieldNames, ",")
	goodsRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallGoodsIdPrefix = "cache:goZeroMall:goods:id:"
)

type (
	goodsModel interface {
		Insert(ctx context.Context, data *Goods) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Goods, error)
		Update(ctx context.Context, newData *Goods) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGoodsModel struct {
		sqlc.CachedConn
		table string
	}

	Goods struct {
		Id              int64         `db:"id"`
		AddTime         time.Time     `db:"add_time"`
		IsDeleted       sql.NullInt64 `db:"is_deleted"`
		UpdateTime      time.Time     `db:"update_time"`
		CategoryId      int64         `db:"category_id"`
		BrandId         int64         `db:"brand_id"`
		OnSale          int64         `db:"on_sale"`
		GoodsSn         string        `db:"goods_sn"`
		Name            string        `db:"name"`
		ClickNum        int64         `db:"click_num"`
		SoldNum         int64         `db:"sold_num"`
		FavNum          int64         `db:"fav_num"`
		Stocks          int64         `db:"stocks"`
		MarketPrice     float64       `db:"market_price"`
		ShopPrice       float64       `db:"shop_price"`
		GoodsBrief      string        `db:"goods_brief"`
		ShipFree        int64         `db:"ship_free"`
		Images          string        `db:"images"`
		DescImages      string        `db:"desc_images"`
		GoodsFrontImage string        `db:"goods_front_image"`
		IsNew           int64         `db:"is_new"`
		IsHot           int64         `db:"is_hot"`
		DeletedAt       gorm.DeletedAt
	}
)

func newGoodsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultGoodsModel {
	return &defaultGoodsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`goods`",
	}
}

func (m *defaultGoodsModel) Delete(ctx context.Context, id int64) error {
	goZeroMallGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallGoodsIdKey)
	return err
}

func (m *defaultGoodsModel) FindOne(ctx context.Context, id int64) (*Goods, error) {
	goZeroMallGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsIdPrefix, id)
	var resp Goods
	err := m.QueryRowCtx(ctx, &resp, goZeroMallGoodsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsModel) Insert(ctx context.Context, data *Goods) (sql.Result, error) {
	goZeroMallGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.CategoryId, data.BrandId, data.OnSale, data.GoodsSn, data.Name, data.ClickNum, data.SoldNum, data.FavNum, data.Stocks, data.MarketPrice, data.ShopPrice, data.GoodsBrief, data.ShipFree, data.Images, data.DescImages, data.GoodsFrontImage, data.IsNew, data.IsHot)
	}, goZeroMallGoodsIdKey)
	return ret, err
}

func (m *defaultGoodsModel) Update(ctx context.Context, data *Goods) error {
	goZeroMallGoodsIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallGoodsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.CategoryId, data.BrandId, data.OnSale, data.GoodsSn, data.Name, data.ClickNum, data.SoldNum, data.FavNum, data.Stocks, data.MarketPrice, data.ShopPrice, data.GoodsBrief, data.ShipFree, data.Images, data.DescImages, data.GoodsFrontImage, data.IsNew, data.IsHot, data.Id)
	}, goZeroMallGoodsIdKey)
	return err
}

func (m *defaultGoodsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallGoodsIdPrefix, primary)
}

func (m *defaultGoodsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultGoodsModel) tableName() string {
	return m.table
}
