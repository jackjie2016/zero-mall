// Code generated by goctl. DO NOT EDIT!

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	cartFieldNames          = builder.RawFieldNames(&Cart{})
	cartRows                = strings.Join(cartFieldNames, ",")
	cartRowsExpectAutoSet   = strings.Join(stringx.Remove(cartFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	cartRowsWithPlaceHolder = strings.Join(stringx.Remove(cartFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheGoZeroMallCartIdPrefix = "cache:goZeroMall:cart:id:"
)

type (
	cartModel interface {
		Insert(ctx context.Context, data *Cart) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Cart, error)
		Update(ctx context.Context, data *Cart) error
		Delete(ctx context.Context, id int64) error
		TransCtx(ctx context.Context, session sqlx.Session) error
	}

	defaultCartModel struct {
		sqlc.CachedConn
		table string
	}

	Cart struct {
		Id         int64     `db:"id"`
		AddTime    time.Time `db:"add_time"`
		IsDeleted  int64     `db:"is_deleted"`
		UpdateTime time.Time `db:"update_time"`
		User       int64     `db:"user"`
		Goods      int64     `db:"goods"`
		Nums       int64     `db:"nums"`
		Checked    int64     `db:"checked"`
	}
)

func newCartModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCartModel {
	return &defaultCartModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`cart`",
	}
}

func (m *defaultCartModel) Delete(ctx context.Context, id int64) error {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, goZeroMallCartIdKey)
	return err
}

func (m *defaultCartModel) FindOne(ctx context.Context, id int64) (*Cart, error) {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, id)
	var resp Cart
	err := m.QueryRowCtx(ctx, &resp, goZeroMallCartIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCartModel) Insert(ctx context.Context, data *Cart) (sql.Result, error) {

	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, cartRowsExpectAutoSet)

		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.User, data.Goods, data.Nums, data.Checked)
	}, goZeroMallCartIdKey)
}

func (m *defaultCartModel) Update(ctx context.Context, data *Cart) error {
	goZeroMallCartIdKey := fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, cartRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.AddTime, data.IsDeleted, data.User, data.Goods, data.Nums, data.Checked, data.Id)
	}, goZeroMallCartIdKey)
	return err
}

func (m *defaultCartModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheGoZeroMallCartIdPrefix, primary)
}

func (m *defaultCartModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", cartRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}
func (m *defaultCartModel) TransCtx(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultCartModel) tableName() string {
	return m.table
}
